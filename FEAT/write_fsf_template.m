function write_fsf_template (fsf)

%%




%% 
% Open the .fsf file based on information in the structure
fid = fopen(fullfile(fsf.templateDir,fsf.templateName),'wt');

% start writing the fsf file
fsf_str = sprintf([ ...
       '\n# FEAT version number' ...
       '\nset fmri(version) %1.2f\n'], fsf.version);
 fprintf(fid,'%s', fsf_str);
 
 fsf_str = sprintf([ ...
       '\n# Are we in MELODIC?' ...
       '\nset fmri(inmelodic) %d\n',fsf.inmelodic]);
 fprintf(fid,'%s',fsf_str);
 
 fsf_str = sprintf([...
       '\n# Analysis level' ...
       '\n# 1 : First-level analysis' ...
       '\n# 2 : Higher-level analysis' ...
       '\nset fmri(level) %d\n'], fsf.level);
 fprintf(fid,'%s', fsf_str);
 
 fsf_str = sprintf([...
       '\n# Which stages to run' ...
       '\n# 0 : No first-level analysis (registration and/or group stats only)' ...
       '\n# 7 : Full first-level analysis' ...
       '\n# 1 : Pre-processing' ...
       '\n# 2 : Statistics' ...
       '\nset fmri(analysis) %d\n'], fsf.analysis);
 fprintf(fid,'%s', fsf_str);
 
 fsf_str = sprintf([...
       '\n# Use relative filenames' ...
       '\nset fmri(relative_yn) %d\n'], fsf.relative_yn);
 fprintf(fid,'%s', fsf_str);
 
 fsf_str = sprintf([...
       '\n# Balloon help' ...
       '\nset fmri(help_yn) %d\n'], fsf.help_yn);
 fprintf(fid,'%s', fsf_str);
 
 fsf_str = sprintf([...
       '\n# Run Featwatcher' ...
       '\nset fmri(featwatcher_yn) %d\n'], fsf.featwatcher_yn);
 fprintf(fid,'%s', fsf_str);
 
 fsf_str = sprintf([...
       '\n# Cleanup first-level standard-space images' ...
       '\nset fmri(sscleanup_yn) %d\n'], fsf.sscleanup_yn);
 fprintf(fid,'%s', fsf_str);
 
 fsf_str = sprintf([...
       '\n# Output directory' ...
       '\nset fmri(outputdir) "%s"\n'], fsf.outputdir);
 fprintf(fid,'%s', fsf_str);
 
 fsf_str = sprintf([...
       '\n# TR(s)' ...
       '\nset fmri(tr) %1.2f\n'], fsf.tr);
 fprintf(fid,'%s', fsf_str);
 
 fsf_str = sprintf([...
       '\n# Total volumes' ...
       '\nset fmri(npts) %d\n'], fsf.npts);
 fprintf(fid,'%s', fsf_str);
 
 fsf_str = sprintf([...
       '\n# Delete volumes' ...
       '\nset fmri(ndelete) %d\n'], fsf.ndelete);
 fprintf(fid,'%s', fsf_str);
 
   fsf_str = sprintf([...
       '\n# Perfusion tag/control order' ...
       '\nset fmri(tagfirst) %d\n'], fsf.tagfirst);
   fprintf(fid,'%s', fsf_str);

   
 fsf_str = sprintf([...
       '\n# Number of first-level analyses' ...
       '\nset fmri(multiple) %d\n'], fsf.multiple);
 fprintf(fid,'%s', fsf_str);
 
 fsf_str = sprintf([...
       '\n# Higher-level input type' ...
       '\n# 1 : Inputs are lower-level FEAT directories' ...
       '\n# 2 : Inputs are cope images from FEAT directories' ...
       '\nset fmri(inputtype) %d\n'], fsf.inputtype);
 fprintf(fid,'%s', fsf_str);
 
 fsf_str = sprintf([...
       '\n# Carry out pre-stats processing?' ...
       '\nset fmri(filtering_yn) %d\n'], fsf.filtering_yn);
 fprintf(fid,'%s', fsf_str);
 
 fsf_str = sprintf([...
       '\n# Brain/background threshold, %%' ...
       '\nset fmri(brain_thresh) %d\n'], fsf.brain_thresh);
 fprintf(fid,'%s', fsf_str);
 
 fsf_str = sprintf([...
     '\n# Critical z for design efficiency calculation' ...
     '\nset fmri(critical_z) %1.2f\n'], fsf.critical_z);
 fprintf(fid,'%s', fsf_str);
 
 fsf_str = sprintf([...
     '\n# Noise level' ...
     '\nset fmri(noise) %1.6f\n'], fsf.noise);
 fprintf(fid,'%s', fsf_str);
 
 fsf_str = sprintf([...
     '\n# Noise AR(1)' ...
     '\nset fmri(noisear) %1.6f\n'], fsf.noisear);
 fprintf(fid,'%s', fsf_str);
 